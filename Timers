/**
  ******************************************************************************
  * @file    main.c
  * @author  Nathan Gollins
  * @date    Jan 19, 2024
  * @brief   ECE 362 Lab 3 - Timers
  ******************************************************************************
*/

/**
******************************************************************************/

// Fill out your username, otherwise your completion code will have the 
// wrong username!
const char* username = "ngollins";

/******************************************************************************
*/ 

#include "stm32f0xx.h"
#include <stdio.h>
#include <stdint.h>

// Global data structure
char disp[9]         = "Hello...";
uint8_t col          = 0;
uint8_t mode         = 'A';
uint8_t thrust       = 0;
int16_t fuel         = 800;
int16_t alt          = 4500;
int16_t velo         = 0;

// Keymap is in `font.S` to match up what autotester expected
extern char keymap;
extern char disp[9];
extern uint8_t col;
extern uint8_t mode;
extern uint8_t thrust;
extern int16_t fuel;
extern int16_t alt;
extern int16_t velo;

// Make it easier to access keymap
char* keymap_arr = &keymap;

// Font array in assembly file
// as I am too lazy to convert it into C array
extern uint8_t font[];

// The functions we should implement
void enable_ports();
void show_char(int n, char c);
void drive_column(int c);
int read_rows();
char rows_to_key(int rows);
void handle_key(char key);
void setup_tim7();
void write_display();
void update_variables();
void setup_tim14();

// Auotest functions
void internal_clock();
extern void check_wiring();
extern void autotest();
extern void fill_alpha();

int main(void) {
    internal_clock();

    // Uncomment when you are ready to test wiring.
    //check_wiring();
    
    // Uncomment when you are ready to test everything.
    autotest();
    
    enable_ports();
    // Comment out once you are checked off for fill_alpha
    // fill_alpha();

    setup_tim7();
    setup_tim14();

    for(;;) {
        // enter low power sleep mode 
        // and Wait For Interrupt (WFI)
        asm("wfi");
    }
}

/**
 * @brief Enable the ports and configure pins as described
 *        in lab handout
 * 
 */
void enable_ports() {
  RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
  RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
  GPIOB -> MODER &= 0xffff0000;
  GPIOC -> MODER &= 0xffff0000; 
  GPIOC -> MODER |= 0x00005500;
  GPIOC -> PUPDR |= 0x000000aa;  
  GPIOB -> MODER |= 0x00155555;
    
}

/**
 * @brief Show a character `c` on column `n`
 *        of the segment LED display
 * 
 * @param n 
 * @param c 
 */
void show_char(int n, char c) {
    if(n < 0 || n > 7)
    {
      return;
    }
    else
    {
      // int inx = (int) c;
      GPIOB->ODR = font[c];
      GPIOB->ODR |= n << 8;
      
    }
    // font[c] contains the bit setting for PB0-7 (the sink driver)
    //write content of font[c] to the corresponding bits in `GPIOB->ODR` (i.e. those pins controlling the decoder and the sink driver)
}


/**
 * @brief Drive the column pins of the keypad
 *        First clear the keypad column output
 *        Then drive the column represented by `c`
 * 
 * @param c 
 */
void drive_column(int c) {
    GPIOC -> BSRR |= 0x00f00000;
    int trueCol = (c &= 0x3);
    GPIOC -> BSRR |= 1 << (4 + trueCol);
    //then set the bits corresponding to the column `c`
}


/**
 * @brief Read the rows value of the keypad
 * 
 * @return int 
 */
int read_rows() {
  int temp = GPIOC -> IDR & 0xF;
  return temp;
}

/**
 * @brief Convert the pressed key to character
 *        Use the rows value and the current `col`
 *        being scanning to compute an offset into
 *        the character map array
 * 
 * @param rows 
 * @return char 
 */
char rows_to_key(int rows) {
    int currCol = col & 0x3;
    int offset = 0;
    // Note `rows` will be a 4 bit value from reading the IDR register of the row pins of the keypad
    if((rows & 0x1))
    {
      offset = currCol * 4 + 0;
    }
    else if((rows & 0x2))
    {
      offset = currCol * 4 + 1;
    }
    else if((rows & 0x4))
    {
      offset = currCol * 4 + 2;
    }
    else if((rows & 0x8))
    {
      offset = currCol * 4 + 3;
    }
    //lookup `c` in the `keymap_arr` indexed by the offset
    return keymap_arr[offset];
    //return c;
}

/**
 * @brief Handle key pressed in the game
 * 
 * @param key 
 */
void handle_key(char key) {
    if (key == 'A' || key == 'B' || key =='D'){
      mode = key;
    } 
    else if (key - '0' >= 0 || key - '0' <= 9)
    {
      int val = key - '0';
      thrust = val;
    }
}

//-------------------------------
// Timer 7 ISR goes here

void TIM7_IRQHandler(void)
{
  TIM7->SR &= ~TIM_SR_UIF;
  int rows = read_rows();
  if (rows != 0)
  {
      char newKey = rows_to_key(rows);
      handle_key(newKey);
  }
  int curCol = col;
  char theChar = disp[curCol];
  show_char(curCol, theChar);
  if(++col == 8)
  {
    col = 0;
  }
  drive_column(col);
}
//-------------------------------



/**
 * @brief Setup timer 7 as described in lab handout
 * 
 */
void setup_tim7() {
  //   Enable the RCC clock for TIM7.
  // Set the Prescaler (PSC) and Auto-Reload Register (ARR) to result in a timer update event exactly once per millisecond. (i.e., a frequency of 1 kHz). The system clock connected to the timer is 48 MHz, so use the right combination of PSC and ARR to get it down to 1 kHz.
  // Enable the UIE bit in the DIER to enable the UIE flag (use the symbol TIM_DIER_UIE for this). This will enable an update interrupt to occur each time the free-running counter of the timer reaches the ARR value and starts back at zero.
  // Enable the interrupt for Timer 7 in the NVIC ISER.
  // Enable Timer 7 by setting the CEN bit in the Timer 7 Control Register 1. (Set TIM_CR1_CEN in TIM7_CR1.)
  RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
   
  TIM7 -> PSC = 24000 - 1;
  TIM7 -> ARR = 2 - 1;

  TIM7->DIER |= TIM_DIER_UIE;

  NVIC -> ISER[0] = 1 << TIM7_IRQn;

  TIM7 -> CR1 |= TIM_CR1_CEN;


}


/**
 * @brief Write the display based on game's mode
 * 
 */
void write_display() {
    if (mode == 'C')
    {
      snprintf(disp, 8, "%s", "Crashed");
    }
    if (mode == 'L')
    {
      snprintf(disp, 8, "%s", "Landed ");
    }
    if (mode == 'A')
    {
      snprintf(disp, 9, "ALt%5d", alt);
    }
    if (mode == 'B')
    {
      snprintf(disp, 9, "FUEL %3d", fuel);
    }
    if (mode == 'D')
    {
      snprintf(disp, 9, "Spd %4d", velo);
    }
}

/**
 * @brief Game logic
 * 
 */
void update_variables() {
    fuel = fuel - thrust;
    if (fuel <= 0) {
        thrust = 0;
        fuel = 0;
    }

    alt = alt + velo;
    if (alt <= 0) 
    {
      if (-velo < 10)
      {
         mode = 'L';
      } 
      else
      {
        mode = 'C';
      }
      return;
    }

    velo = velo + thrust - 5;
}


//-------------------------------
// Timer 14 ISR goes here
void TIM14_IRQHandler(void) {
    TIM14 -> SR &= ~TIM_SR_UIF;
    update_variables();
    write_display();
}
//-------------------------------
// TODO


/**
 * @brief Setup timer 14 as described in lab
 *        handout
 * 
 */
void setup_tim14() {
  RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
   
  TIM14 -> PSC = 24000 - 1;
  TIM14 -> ARR = 1000 - 1;

  TIM14->DIER |= TIM_DIER_UIE;

  NVIC -> ISER[0] = 1 << TIM14_IRQn;

  TIM14 -> CR1 |= TIM_CR1_CEN;
}
