/**
  ******************************************************************************
  * @file    main.c
  * @author  Nathan Gollins
  * @date    Feb 3, 2024
  * @brief   ECE 362 Lab 6 
  ******************************************************************************
*/

/*******************************************************************************/

// Fill out your username, otherwise your completion code will have the 
// wrong username!
const char* username = "ngollins";

/*******************************************************************************/ 

#include "stm32f0xx.h"

void set_char_msg(int, char);
void nano_wait(unsigned int);
void game(void);
void internal_clock();
void check_wiring();
void autotest();

//===========================================================================
// Configure GPIOC
//===========================================================================
void enable_ports(void) {
    // Only enable port C for the keypad
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    GPIOC->MODER &= ~0xffff;
    GPIOC->MODER |= 0x55 << (4*2);
    GPIOC->OTYPER &= ~0xff;
    GPIOC->OTYPER |= 0xf0;
    GPIOC->PUPDR &= ~0xff;
    GPIOC->PUPDR |= 0x55;
}


uint8_t col; // the column being scanned

void drive_column(int);   // energize one of the column outputs
int  read_rows();         // read the four row inputs
void update_history(int col, int rows); // record the buttons of the driven column
char get_key_event(void); // wait for a button event (press or release)
char get_keypress(void);  // wait for only a button press event.
float getfloat(void);     // read a floating-point number from keypad
void show_keys(void);     // demonstrate get_key_event()

//===========================================================================
// Bit Bang SPI LED Array
//===========================================================================
int msg_index = 0;
uint16_t msg[8] = { 0x0000,0x0100,0x0200,0x0300,0x0400,0x0500,0x0600,0x0700 };
extern const char font[];

//===========================================================================
// Configure PB12 (CS), PB13 (SCK), and PB15 (SDI) for outputs
//===========================================================================
void setup_bb(void) {
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    // PB12 (Represents CS/NSS)
    // PB13 (Represents SCK)
    // PB15 (Represents SDI/MOSI)
    GPIOB->MODER &= ~0xcf000000; //reset MODER
    //GPIOB->MODER |=  ( (0x1 << (2*12)) | (0x1 << (2*13)) | (0x1 << (2*15)) );
    GPIOB->MODER |= 0x45000000;// << (4*6); //Set 12, 13, 15 to otuput
    GPIOB -> BSRR = GPIO_BSRR_BS_12 | GPIO_BSRR_BR_13;// 0x10002000; //set 12 to 1, set 13 to 0
    
}

void small_delay(void) {
    nano_wait(50000);
}

//===========================================================================
// Set the MOSI bit, then set the clock high and low.
// Pause between doing these steps with small_delay().
//===========================================================================
void bb_write_bit(int val) {
    // Set SDI to 0 or 1 based on out
    GPIOB -> BSRR |= (val != 0 ? 0x80000000 : 0x00008000);
    small_delay();
    GPIOB -> BSRR |=  0x20000000;
    small_delay();
    GPIOB -> BSRR |=  0x00002000;
  // Set SCK to 0
    // CS (PB12)
    // SCK (PB13)
    // SDI (PB15)
    
}

//===========================================================================
// Set CS (PB12) low,
// write 16 bits using bb_write_bit,
// then set CS high.
//===========================================================================
void bb_write_halfword(int halfword) {
    GPIOB -> BSRR |=  0x00001000; // Set CS to 0
    for(int i = 15; i >= 0; i--)// Call bb_write_bit() for bit 15-0
    {
        int bitAtHand = (halfword >> i) & 0x1;
        bb_write_bit(bitAtHand);
    }
    GPIOB -> BSRR |=  0x10000000; // Set CS to 1
}

//===========================================================================
// Continually bitbang the msg[] array.
//===========================================================================
void drive_bb(void) {
    for(;;)
        for(int d=0; d<8; d++) {
            bb_write_halfword(msg[d]);
            nano_wait(1000000); // wait 1 ms between digits
        }
}

//============================================================================
// Configure Timer 15 for an update rate of 1 kHz.
// Trigger the DMA channel on each update.
// Copy this from lab 4 or lab 5.
//============================================================================

void init_tim15(void) {
    RCC -> APB2ENR |= 0x00010000;
    TIM15 -> DIER |= 0x00000100;
    TIM15 -> PSC = 24000 - 1;
    TIM15 -> ARR = 2 - 1;
    TIM15 -> CR1 |= 0x00000001;

}


//===========================================================================
// Configure timer 7 to invoke the update interrupt at 1kHz
// Copy from lab 4 or 5.
//===========================================================================

void init_tim7(void) {
  RCC->APB1ENR |= 0x00000020;
   
  TIM7 -> PSC = 24000 - 1;
  TIM7 -> ARR = 2 - 1;

  TIM7 -> DIER |= TIM_DIER_UIE;

  NVIC -> ISER[0] = 1 << TIM7_IRQn;

  TIM7 -> CR1 |= TIM_CR1_CEN;
}


//===========================================================================
// Copy the Timer 7 ISR from lab 5
//===========================================================================
// TODO To be copied

void TIM7_IRQHandler(void)
{
    TIM7->SR &= ~TIM_SR_UIF;
    int rows = read_rows();
    update_history(col, rows);
    col = (col + 1) & 3;
    drive_column(col);
}

//===========================================================================
// Initialize the SPI2 peripheral.
//===========================================================================
void init_spi2(void) {
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    GPIOB -> MODER &= ~0xcf000000;
    GPIOB->MODER |= 0x8a000000;// << (4*6); //Set 12, 13, 15 to alternative function
    GPIOB -> AFR[1] &= ~0xf0ff0000;

    RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;

//     Ensure that the CR1_SPE bit is clear first. Many of the bits set in the control registers require that the SPI channel is not enabled.
    SPI2 -> CR1 &= ~(0x1 << 6);
    // Set the baud rate as low as possible (maximum divisor for BR).
    SPI2 -> CR1 |= 0x7 << 3; //For bits 3-5 = 1
// Configure the interface for a 16-bit word size.
    SPI2 -> CR2 |= 0xf << 8; // Set 11 to 1
// Configure the SPI channel to be in "master configuration".
    SPI2 -> CR1 |= 0x1 << 2; //Set bit 2 to 1
// Set the SS Output enable bit and enable NSSP.
    SPI2 -> CR2 |= 0x3 << 2; //Set 2nd and 3rd bit to 1
// Set the TXDMAEN bit to enable DMA transfers on transmit buffer empty
    SPI2 -> CR2 |= 0x1 << 1; // Set 1st bit to 1
// Enable the SPI channel.
    SPI2 -> CR1 |= 0x1 << 6; //Set bit 6 to 1

}

//===========================================================================
// Configure the SPI2 peripheral to trigger the DMA channel when the
// transmitter is empty.  Use the code from setup_dma from lab 5.
//===========================================================================
void spi2_setup_dma(void) {
    
    //Turn off enable
    DMA1_Channel5 -> CCR &= ~DMA_CCR_EN;
    //0xfffffffe

    //Activate
    RCC -> AHBENR |= RCC_AHBENR_DMA1EN;
    //CMAR
    DMA1_Channel5 -> CMAR = (uint32_t) &msg;
    //CPAR
    DMA1_Channel5 -> CPAR = (uint32_t) &(SPI2->DR);
    //CNDTR
    DMA1_Channel5 -> CNDTR = 8;
    //DIR
     DMA1_Channel5 -> CCR |= DMA_CCR_DIR;//page 209 manual
    //0x00000010

    //MINC
    DMA1_Channel5 -> CCR |= DMA_CCR_MINC;
    //0x00000080

    //Memory size
    DMA1_Channel5 -> CCR |= DMA_CCR_MSIZE_0;
    //0x00000400

    //P datum
    DMA1_Channel5 -> CCR |= DMA_CCR_PSIZE_0;
    //0x00000100

    //Circular mode

    DMA1_Channel5 -> CCR |= DMA_CCR_CIRC;
    //0x00000020

    SPI2 -> CR2 |= 0x1 << 1; //Sets bit 1



}

//===========================================================================
// Enable the DMA channel.
//===========================================================================
void spi2_enable_dma(void) {
    DMA1_Channel5 -> CCR |= 0x00000001;
}

//===========================================================================
// 4.4 SPI OLED Display
//===========================================================================
void init_spi1() {
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    GPIOA -> MODER &= ~0xc000cc00;
    GPIOA->MODER |= 0x80008800;// << (4*6); //Set 5, 7, 15 to alternative function
    GPIOA -> AFR[1] &= ~0xf0000000;
    GPIOA -> AFR[0] &= ~0xf0f00000;

    RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;

//     Ensure that the CR1_SPE bit is clear first. Many of the bits set in the control registers require that the SPI channel is not enabled.
    SPI1 -> CR1 &= ~(0x1 << 6);
    // Set the baud rate as low as possible (maximum divisor for BR).
    SPI1 -> CR1 |= 0x7 << 3; //For bits 3-5 = 1
// Configure the interface for a 16-bit word size.
    SPI1 -> CR2 = 0x9 << 8; // Set 11-8 to 1001
// Configure the SPI channel to be in "master configuration".
    SPI1 -> CR1 |= 0x1 << 2; //Set bit 2 to 1
// Set the SS Output enable bit and enable NSSP.
    SPI1 -> CR2 |= 0x3 << 2; //Set 2nd and 3rd bit to 1
// Set the TXDMAEN bit to enable DMA transfers on transmit buffer empty
    SPI1 -> CR2 |= 0x1 << 1; // Set 1st bit to 1
// Enable the SPI channel.
    SPI1 -> CR1 |= 0x1 << 6; //Set bit 6 to 1
}
void spi_cmd(unsigned int data) {
    while((SPI1->SR & SPI_SR_TXE) == 0)
    ; // wait for the transmit buffer to be empty
    SPI1->DR = data;    // What's 0x41?  Not a typo.    
}
void spi_data(unsigned int data) {
    spi_cmd(data | 0x200);
}
void spi1_init_oled() {
    nano_wait(1);
    spi_cmd(0x38);
    spi_cmd(0x08);
    spi_cmd(0x01);
    nano_wait(2);
    spi_cmd(0x06);
    spi_cmd(0x02);
    spi_cmd(0x0c);
}
void spi1_display1(const char *string) {
    //Move curser home position
    spi_cmd(0x02);
    int i = 0;
    while(*(string + i) != '\0')
    {
        spi_data(*(string + i));
        i++;
    }
}
void spi1_display2(const char *string) {
    //Move curser end row
    spi_cmd(0x0c);
    int i = 0;
    while(*(string + i) != '\0')
    {
        spi_data(*(string + i));
        i++;
    }
}

//===========================================================================
// This is the 34-entry buffer to be copied into SPI1.
// Each element is a 16-bit value that is either character data or a command.
// Element 0 is the command to set the cursor to the first position of line 1.
// The next 16 elements are 16 characters.
// Element 17 is the command to set the cursor to the first position of line 2.
//===========================================================================
uint16_t display[34] = {
        0x002, // Command to set the cursor at the first position line 1
        0x200+'E', 0x200+'C', 0x200+'E', 0x200+'3', 0x200+'6', + 0x200+'2', 0x200+' ', 0x200+'i',
        0x200+'s', 0x200+' ', 0x200+'t', 0x200+'h', + 0x200+'e', 0x200+' ', 0x200+' ', 0x200+' ',
        0x0c0, // Command to set the cursor at the first position line 2
        0x200+'c', 0x200+'l', 0x200+'a', 0x200+'s', 0x200+'s', + 0x200+' ', 0x200+'f', 0x200+'o',
        0x200+'r', 0x200+' ', 0x200+'y', 0x200+'o', + 0x200+'u', 0x200+'!', 0x200+' ', 0x200+' ',
};

//===========================================================================
// Configure the proper DMA channel to be triggered by SPI1_TX.
// Set the SPI1 peripheral to trigger a DMA when the transmitter is empty.
//===========================================================================
void spi1_setup_dma(void) {
    
    //Turn off enable
    DMA1_Channel3 -> CCR &= ~DMA_CCR_EN;
    //0xfffffffe

    //Activate
    RCC -> AHBENR |= RCC_AHBENR_DMA1EN;
    //CMAR
    DMA1_Channel3 -> CMAR = (uint32_t) &display;
    //CPAR
    DMA1_Channel3 -> CPAR = (uint32_t) &(SPI1->DR);
    //CNDTR
    DMA1_Channel3 -> CNDTR = 34;
    //DIR
     DMA1_Channel3 -> CCR |= DMA_CCR_DIR;//page 209 manual
    //0x00000010

    //MINC
    DMA1_Channel3 -> CCR |= DMA_CCR_MINC;
    //0x00000080

    //Memory size
    DMA1_Channel3 -> CCR |= DMA_CCR_MSIZE_0;
    //0x00000400

    //P datum
    DMA1_Channel3 -> CCR |= DMA_CCR_PSIZE_0;
    //0x00000100

    //Circular mode

    DMA1_Channel3 -> CCR |= DMA_CCR_CIRC;
    //0x00000020

     //while((SPI1->SR & SPI_SR_TXE) == 0)
    // ; // wait for the transmit buffer to be empty
    
   // SPI1 -> CR2 |= 0x1 << 1; //Sets bit 1
}

//===========================================================================
// Enable the DMA channel triggered by SPI1_TX.
//===========================================================================
void spi1_enable_dma(void) {
    DMA1_Channel3 -> CCR |= 0x00000001;
}

//===========================================================================
// Main function
//===========================================================================

int main(void) {
    internal_clock();

    msg[0] |= font['E'];
    msg[1] |= font['C'];
    msg[2] |= font['E'];
    msg[3] |= font[' '];
    msg[4] |= font['3'];
    msg[5] |= font['6'];
    msg[6] |= font['2'];
    msg[7] |= font[' '];

    // GPIO enable
    enable_ports();
    // setup keyboard
    init_tim7();

    // LED array Bit Bang

//#define BIT_BANG
#if defined(BIT_BANG)
    setup_bb();
    drive_bb();
#endif

    // Direct SPI peripheral to drive LED display
//#define SPI_LEDS
#if defined(SPI_LEDS)
    init_spi2();
    spi2_setup_dma();
    spi2_enable_dma();
    init_tim15();
    show_keys();
#endif

    // LED array SPI
// #define SPI_LEDS_DMA
#if defined(SPI_LEDS_DMA)
    init_spi2();
    spi2_setup_dma();
    spi2_enable_dma();
    show_keys();
#endif

    // SPI OLED direct drive
//#define SPI_OLED
#if defined(SPI_OLED)
    init_spi1();
    spi1_init_oled();
    spi1_display1("Hello again,");
    spi1_display2(username);
#endif

    // SPI
//#define SPI_OLED_DMA
#if defined(SPI_OLED_DMA)
    init_spi1();
    spi1_init_oled();
    spi1_setup_dma();
    spi1_enable_dma();
#endif

    // Uncomment when you are ready to generate a code.
    autotest();

    // Game on!  The goal is to score 100 points.
    game();
}
